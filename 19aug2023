 {
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d2e32221-0973-4b15-b789-8f23d81da01a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q1 1. Declare two variables, `x` and `y`, and assign them integer values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ce14d6bf-66de-4f34-b727-751faf915c80",
   "metadata": {},
   "outputs": [],
   "source": [
    "x =8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ceb70ae5-19dc-4849-ab20-efbc1f874094",
   "metadata": {},
   "outputs": [],
   "source": [
    "y =9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "612cb231-0ec8-4d2f-a0fd-7aefa43ea414",
   "metadata": {},
   "outputs": [],
   "source": [
    "x,y = y,x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8a95d135-625a-49ed-ab3d-1ad5be8cea42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('Value of x:', 9)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(\"Value of x:\", x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cd3ed0f2-55f1-4072-ac1d-06c61c41d70a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('Value of y:', 8)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(\"Value of y:\", y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a895396c-d0ca-4a94-bd4e-4b6300b6bb4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q2 Create a program that calculates the area of a rectangle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "370cea1d-e29a-436e-927f-53d47c05feb4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# area of rectanglr = l*b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2080dbec-8a1b-4fd1-9fd1-3e79a2236e6f",
   "metadata": {},
   "outputs": [],
   "source": [
    "l = 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9fe6d65c-8f23-46a8-99bc-29cbe1f06b6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "b = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "93208334-2f7f-4c90-814d-2934bed9ff2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "60"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "l*b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e6e9ecbc-43b2-4ca4-8584-2406986edb7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q3 Write a Python program that converts temperatures from Celsius to"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2c22f828-db11-4c69-a3ee-3fc51d0132fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# celsius = c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "07fdee9b-b3f8-4a7c-b7bf-77792fe721da",
   "metadata": {},
   "outputs": [],
   "source": [
    "# formula of converting celcius into Fahrenheit is ( c+32)1.8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "15c942e9-f68e-4475-9a9e-20376814b4cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "c = 98"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a32f6755-160f-4338-a37b-5d6377d95f46",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "208.4"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(c*9/5)+32"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "541e65f0-4275-45da-b559-292428cdf389",
   "metadata": {},
   "outputs": [],
   "source": [
    "        #TOPIC: String Based Questions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "7b6365b3-5ad6-49d8-a4b8-bdbfdc4266f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q1 Write a Python program that takes a string as input and prints the length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "4b6364e1-5de3-4438-b9f2-c157a0fcef18",
   "metadata": {},
   "outputs": [],
   "source": [
    "p = 'vishal'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "1297a719-4a1e-4c37-8127-a5291ab27283",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "084572f5-110a-4ea6-8277-fce784128ed1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q2 Create a program that takes a sentence from the user and counts the number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "e1382f08-ef71-4509-b6d1-06e5fdbbff4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No. of vowels : 2\n"
     ]
    }
   ],
   "source": [
    "def vowel_count(str):\n",
    "    # Creating a list of vowels\n",
    "    vowels = \"aeiouAEIOU\"\n",
    "     \n",
    "    # Using list comprehension to count the number of vowels in the string\n",
    "    count = len([char for char in str if char in vowels])\n",
    "     \n",
    "    # Printing the count of vowels in the string\n",
    "    print(\"No. of vowels :\", count)\n",
    " \n",
    "# Driver code \n",
    "str = \"vishal\"\n",
    " \n",
    "# Function Call\n",
    "vowel_count(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "c94ac5c9-00c0-445f-b1b9-789c52aeebbd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q3 Given a string, reverse the order of characters using string slicing and print"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "7b0f1038-660e-4696-ba99-d625dfa8894c",
   "metadata": {},
   "outputs": [],
   "source": [
    "p = \"vishal\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "be5a4cda-a8ba-4113-baa4-969d308315b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'lahsiv'"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p [7: :-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "8827e710-97ba-4ce4-b99c-6c654e362fd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q4 Write a program that takes a string as input and checks if it is a palindrome"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "951f8457-135c-4d95-adbc-0e98b4ff92f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "s =  \"malyalam\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "c3c3f93f-934c-4b17-9343-32a9451cc87c",
   "metadata": {},
   "outputs": [],
   "source": [
    "w = \"\"\n",
    "for i in x:\n",
    "    w = i+w"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "32db1328-a420-4661-bfef-249ee1e672fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "yes\n"
     ]
    }
   ],
   "source": [
    "if (x==w):\n",
    "    print(\"yes\")\n",
    "else:\n",
    "    print(\"no\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "f008d1d0-1d68-4eff-aa57-b95598613abc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Q5 5. Create a program that takes a string as input and removes all the spaces from"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "b4171b0f-d98e-4a9f-9103-171dbc4a3f86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a string:  all the best for your exame\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "allthebestforyourexame\n"
     ]
    }
   ],
   "source": [
    "def remove_spaces(string):\n",
    "  \"\"\"Removes all the spaces from a string.\n",
    "\n",
    "  Args:\n",
    "    string: The string to remove spaces from.\n",
    "\n",
    "  Returns:\n",
    "    The string without spaces.\n",
    "  \"\"\"\n",
    "\n",
    "  return string.replace(\" \", \"\")\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "  string = input(\"Enter a string: \")\n",
    "  print(remove_spaces(string))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2f12e23-6491-4576-9a75-26dacb47278e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
